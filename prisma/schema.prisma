// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  username           String?             @unique
  email              String?             @unique
  emailVerified      DateTime?
  credential         Boolean?            @default(false)
  active             Boolean             @default(false)
  image              String?
  password           String?
  karyaId            String?
  ticketsCompetition TicketCompetition[]
  ticketsExhibition  TicketExhibition?
  accounts           Account[]
  sessions           Session[]
  karya              Karya?              @relation(fields: [karyaId], references: [id], onDelete: Cascade, name: "OldKaryaRelation")
  votesKarya           Karya[]             @relation(name: "NewKaryaRelation")
  activateToken      ActivateToken[]
  resetToken         ResetToken[]
  regisExhiData      RegisExhiData?
  transaction        TransactionDetail[]
}

model ActivateToken {
  id          String    @id @default(uuid())
  userId      String
  token       String    @unique
  activatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetToken {
  id          String    @id @default(uuid())
  userId      String
  token       String    @unique
  activatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RegisExhiData {
  id               String     @id @default(uuid())
  userId           String     @unique
  collectiveType   String     @default("1")
  registrationType String
  verified         Boolean    @default(false)
  statusData       String     @default("waiting")
  paymentMethod    String
  paymentProof     String
  tickets          TicketGS[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TicketGS {
  id      String  @id @default(uuid())
  active  Boolean @default(false)
  name    String
  email   String
  phone   String
  idLine  String
  regisId String?

  regisData RegisExhiData? @relation(fields: [regisId], references: [id], onDelete: Cascade)

  transactionDetail   TransactionDetail? @relation(fields: [transactionDetailId], references: [id])
  transactionDetailId String?
}

model TicketExhibition {
  id            String  @id @default(uuid())
  ticketType    String
  verified      Boolean @default(false)
  active        Boolean @default(false)
  userId        String  @unique
  nameCustomer  String
  paymentMethod String
  proof         String
  names         String
  email         String
  phone         String
  address       String
  institution   String
  phoneNumber   String
  ages          String
  amountPrice   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TicketCompetition {
  id              String @id @default(uuid())
  userId          String
  verified        String @default("pending")
  competitionType String
  team            Team?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id            String                   @id @default(uuid())
  ticketId      String                   @unique
  teamName      String                   @unique
  chairmanName  String
  chairmanEmail String
  members       ParticipantCompetition[]
  karya         Karya?
  abstract      Abstract?
  regist3Data   Regist3Data?

  ticketCompetition TicketCompetition @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model Abstract {
  id               String @id @default(uuid())
  teamId           String @unique
  teamName         String
  letterPlagiarism String
  abstract         String
  status           String @default("waiting")

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model ParticipantCompetition {
  id           String @id @default(uuid())
  teamId       String
  name         String
  email        String
  institution  String
  phoneNumber  String
  age          String
  twibbonProof String
  studentProof String

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Regist3Data {
  id            String @id @default(uuid())
  teamId        String @unique
  teamName      String
  statusPayment String @default("waiting")
  billName      String
  paymentProof  String
  paymentMethod String

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Karya {
  id            String  @id @default(uuid())
  teamId        String  @unique
  linkFullPaper String?
  linkVideo     String?
  linkVideo2    String?
  countVote     BigInt  @default(0)
  usersVote     User[]  @relation(name: "OldKaryaRelation")
  usersVoteNew  User[]  @relation(name: "NewKaryaRelation")

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model TransactionDetail {
  id               String     @id @default(uuid())
  total            BigInt
  status           String     @default("no-status")
  statusData       String     @default("waiting")
  customerName     String
  customerEmail    String
  registrationType String
  paymentType      String?
  snapToken        String
  snapRedirectURL  String
  userId           String
  User             User       @relation(fields: [userId], references: [id])
  ticketGS         TicketGS[]
  metadata         Json?
  deletedData      Json?
}
